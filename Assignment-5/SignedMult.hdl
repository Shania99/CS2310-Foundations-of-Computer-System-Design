/* Q1b. 8-bit Signed Integer Multiplier */

CHIP SignedMult{
    IN X[8], Y[8]; //multiplicand, multiplier
    OUT out[8], OF; //output, overflow

    PARTS:
	// Generating 16-bit X.yi with sign extension and then shifting left by i bits to generate partial products
	PPAndSigned(X=X, yi=Y[0], out=pp0);

	PPAndSigned(X=X, yi=Y[1], out=out10);
	ShiftLeft(in=out10, out=pp1);

	PPAndSigned(X=X, yi=Y[2], out=out20);
	ShiftLeft(in=out20, out=out21);
	ShiftLeft(in=out21, out=pp2);

	PPAndSigned(X=X, yi=Y[3], out=out30);
	ShiftLeft(in=out30, out=out31);
	ShiftLeft(in=out31, out=out32);
	ShiftLeft(in=out32, out=pp3);

	PPAndSigned(X=X, yi=Y[4], out=out40);
	ShiftLeft(in=out40, out=out41);
	ShiftLeft(in=out41, out=out42);
	ShiftLeft(in=out42, out=out43);
	ShiftLeft(in=out43, out=pp4);

	PPAndSigned(X=X, yi=Y[5], out=out50);
	ShiftLeft(in=out50, out=out51);
	ShiftLeft(in=out51, out=out52);
	ShiftLeft(in=out52, out=out53);
	ShiftLeft(in=out53, out=out54);
	ShiftLeft(in=out54, out=pp5);

	PPAndSigned(X=X, yi=Y[6], out=out60);
	ShiftLeft(in=out60, out=out61);
	ShiftLeft(in=out61, out=out62);
	ShiftLeft(in=out62, out=out63);
	ShiftLeft(in=out63, out=out64);
	ShiftLeft(in=out64, out=out65);
	ShiftLeft(in=out65, out=pp6);

	PPAndSigned(X=X, yi=Y[7], out=out70);
	ShiftLeft(in=out70, out=out71);
	ShiftLeft(in=out71, out=out72);
	ShiftLeft(in=out72, out=out73);
	ShiftLeft(in=out73, out=out74);
	ShiftLeft(in=out74, out=out75);
	ShiftLeft(in=out75, out=out76);
	ShiftLeft(in=out76, out=pp70);
	Not16(in=pp70, out=pp7); // Generating 1's complement form of pp7

	Reducer3to2(pp0=pp0, pp1=pp1, pp2=pp2, s=s10, c=c10); //summands: pp0, pp1, pp2
	Reducer3to2(pp0=pp3, pp1=pp4, pp2=pp5, s=s11, c=c11); //summands: pp3, pp4, pp5
	Reducer3to2(pp0=pp6, pp1=pp7, pp2[0]=true, pp2[1..15]=false, s=s12, c=c12);//summands: pp6, 1's complement of pp7, 1 in LSB(for 2's complement form)

	
	Reducer3to2(pp0=c10, pp1=s10, pp2=c11, s=s20, c=c20);
	Reducer3to2(pp0=s11, pp1=c12, pp2=s12, s=s21, c=c21);

	Reducer3to2(pp0=c20, pp1=s20, pp2=c21, s=s30, c=c30);
	
	Reducer3to2(pp0=c30, pp1=s30, pp2=s21, s=s40, c=c40);
	//Adding c40 and s40 to generate final sum
	Adder16(x=s40, y=c40, abars=false, sig=true, s[0..7]=out, s[7]=p0, s[8]=p1, s[9]=p2, s[10]=p3,s[11]=p4,s[12]=p5,s[13]=p6,s[14]=p7,s[15]=p8, c16=c16, of=of);
	
	//Overflow detection
	Not(in=p0, out=notp0);
	Not(in=p1, out=notp1);
	Not(in=p2, out=notp2);
	Not(in=p3, out=notp3);
	Not(in=p4, out=notp4);
	Not(in=p5, out=notp5);
	Not(in=p6, out=notp6);
	Not(in=p7, out=notp7);
	Not(in=p8, out=notp8);

	Xor(a=X[7], b=Y[7], out=f2);
	Not(in=f2, out=f1);

	Or(a = p0,b=p1, out=z0);
	Or(a = z0,b=p2, out=z1);
	Or(a = z1,b=p3, out=z2);
	Or(a = z2,b=p4, out=z3);
	Or(a = z3,b=p5, out=z4);
	Or(a = z4,b=p6, out=z5);
	Or(a = z5,b=p7, out=z6);
	Or(a = z6,b=p8, out=of1);

	Or(a = notp0,b=notp1, out=z10);
	Or(a = z10,b=notp2, out=z11);
	Or(a = z11,b=notp3, out=z12);
	Or(a = z12,b=notp4, out=z13);
	Or(a = z13,b=notp5, out=z14);
	Or(a = z14,b=notp6, out=z15);
	Or(a = z15,b=notp7, out=z16);
	Or(a = z16,b=notp8, out=of2);

	And(a=f1, b=of1, out=d1);// Case1: Sign bits of X and Y are same
	And(a=f2, b=of2, out=d2);// Case2: Sign bits of X and Y are different
	Or(a=d1, b=d2, out=OF);


	
}
