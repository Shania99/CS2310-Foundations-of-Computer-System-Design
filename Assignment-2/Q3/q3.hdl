/* 2-bit 1-to-8 demultiplexer*/
CHIP q3 {
	IN x[2], s2, s1, s0;
	OUT a[2], b[2], c[2], d[2], e[2], f[2], g[2], h[2];

	PARTS:
	Not(in=s1,out=nots1);
	Not(in=s0,out=nots0);
	Not(in=s2,out=nots2);

	And3(a=s2, b=s1, c=s0, out=s2s1s0); // S2.S1.S0
	And3(a=s1, b=nots0, c=s2, out=s2s1nots0);  // S2.S1.S0'
	And3(a=nots1, b=s0, c=s2, out=s2nots1s0);  // S2.S1'.S0
	And3(a=nots1, b=nots0, c=s2, out=s2nots1nots0); // S2.S1'.S0'
	
	And3(a=s1, b=s0, c=nots2, out=nots2s1s0); // S2'.S1.S0
	And3(a=s1, b=nots0, c=nots2, out=nots2s1nots0); // S2'.S1.S0'
	And3(a=nots1, b=s0, c=nots2, out=nots2nots1s0); // S2'.S1'.S0
	And3(a=nots1, b=nots0, c=nots2, out=nots2nots1nots0); // S2'.S1'.S0'

	And(a=nots2nots1nots0, b=x[1], out=a[1]); 
	And(a=nots2nots1s0, b=x[1], out=b[1]);
	And(a=nots2s1nots0, b=x[1], out=c[1]);
	And(a=nots2s1s0, b=x[1], out=d[1]);
	And(a=s2nots1nots0, b=x[1], out=e[1]);
	And(a=s2nots1s0, b=x[1], out=f[1]);
	And(a=s2s1nots0, b=x[1], out=g[1]);
	And(a=s2s1s0, b=x[1], out=h[1]);

	And(a=nots2nots1nots0, b=x[0], out=a[0]);
	And(a=nots2nots1s0, b=x[0], out=b[0]);
	And(a=nots2s1nots0, b=x[0], out=c[0]);
	And(a=nots2s1s0, b=x[0], out=d[0]);
	And(a=s2nots1nots0, b=x[0], out=e[0]);
	And(a=s2nots1s0, b=x[0], out=f[0]);
	And(a=s2s1nots0, b=x[0], out=g[0]);
	And(a=s2s1s0, b=x[0], out=h[0]);

}
