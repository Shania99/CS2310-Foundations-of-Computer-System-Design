/* 2-bit 4-to-1 multiplexer */

CHIP q1 {
	IN a[2], b[2], c[2], d[2], s1, s0;
	OUT y[2];

	PARTS:
	Not(in=s1,out=nots1);
	Not(in=s0,out=nots0);

	And(a=s1, b=s0, out=s1s0); // S1.S0
	And(a=s1, b=nots0, out=s1nots0); // S1.S0'
	And(a=nots1, b=s0, out=nots1s0); // S1'.S0
	And(a=nots1, b=nots0, out=nots1nots0); // S1'.S0'

	And(a=nots1nots0, b=a[1], out=term00); // S1'S0'X01 
	And(a=nots1s0, b=b[1], out=term01); // S1'S0.X11 
	And(a=s1nots0, b=c[1], out=term02); // S1.S0'X21 
	And(a=s1s0, b=d[1], out=term03); // S1.S0.X31 

	And(a=nots1nots0, b=a[0], out=term10); // S1'S0'X00
	And(a=nots1s0, b=b[0], out=term11); // S1'S0.X10 
	And(a=s1nots0, b=c[0], out=term12); // S1.S0'X20
	And(a=s1s0, b=d[0], out=term13); // S1.S0.X30

	Or(a=term00, b=term01, out=f1);
	Or(a=term02, b=term03, out=f2);
	Or(a=f1, b=f2, out=y[1]); // Y1 = term00 + term01 + term02 + term03

	Or(a=term10, b=term11, out=a1);
	Or(a=term12, b=term13, out=b1);
	Or(a=a1, b=b1, out=y[0]); // Y0 = term10 + term11 + term12 + term13

}
